name: Pull Request Validation

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "rust/**"
      - ".github/workflows/pr-validation-rust.yml"
  push:
    branches: [main]
    paths:
      - "rust/**"

env:
  CARGO_TERM_COLOR: always

jobs:
  rust-validation:
    name: Rust SDK Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('rust/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('rust/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: rust/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('rust/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Check code formatting
        working-directory: ./rust
        run: cargo fmt --all -- --check

      - name: Run Clippy (linter)
        working-directory: ./rust
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check for security vulnerabilities
        working-directory: ./rust
        run: |
          cargo install cargo-audit || true
          cargo audit

      - name: Run tests
        working-directory: ./rust
        run: cargo test --verbose --all-features

      - name: Test with minimal dependencies
        working-directory: ./rust
        run: cargo test --no-default-features --verbose

      - name: Build documentation
        working-directory: ./rust
        run: cargo doc --no-deps --all-features

      - name: Check build in release mode
        working-directory: ./rust
        run: cargo build --release --verbose

      - name: Run integration tests
        working-directory: ./rust
        run: cargo test --test '*' --verbose

      - name: Benchmark tests (if any)
        working-directory: ./rust
        run: cargo test --benches --verbose || echo "No benchmarks found"

      - name: Generate test coverage
        working-directory: ./rust
        run: |
          cargo install cargo-tarpaulin || true
          cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml || echo "Coverage generation failed"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rust-test-results
          path: |
            rust/target/debug/deps/goiam-*
            rust/cobertura.xml

  minimum-supported-rust-version:
    name: Test MSRV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust 1.70.0 (MSRV)
        uses: dtolnay/rust-toolchain@1.70.0

      - name: Test with MSRV
        working-directory: ./rust
        run: cargo test --verbose
