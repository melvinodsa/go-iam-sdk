name: Go SDK Pull Request Validation

on:
  pull_request:
    branches: [main, develop]
    paths:
      - "golang/**"
      - ".github/workflows/pr-validation-golang.yml"
  push:
    branches: [main]
    paths:
      - "golang/**"

env:
  GO_VERSION: "1.23"

jobs:
  golang-validation:
    name: Go SDK Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('golang/**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ./golang
        run: go mod download

      - name: Verify dependencies
        working-directory: ./golang
        run: go mod verify

      - name: Run go vet
        working-directory: ./golang
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        working-directory: ./golang
        run: staticcheck ./...

      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        working-directory: ./golang
        run: $(go env GOPATH)/bin/golangci-lint run --verbose

      - name: Check code formatting
        working-directory: ./golang
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not properly formatted:"
            gofmt -s -l .
            echo "Please run 'gofmt -s -w .' to fix formatting issues."
            exit 1
          fi

      - name: Run tests
        working-directory: ./golang
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        working-directory: ./golang
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage-report
          path: |
            golang/coverage.out
            golang/coverage.html

      - name: Check test coverage threshold
        working-directory: ./golang
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Test coverage: ${COVERAGE}%"
          THRESHOLD=70
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Test coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
            exit 1
          else
            echo "✅ Test coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
          fi

      - name: Build project
        working-directory: ./golang
        run: go build -v ./...

      - name: Run benchmarks
        working-directory: ./golang
        run: go test -bench=. -benchmem ./... || echo "No benchmarks found"

      - name: Check for Go vulnerabilities
        working-directory: ./golang
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install gosec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run gosec security scanner
        working-directory: ./golang
        run: gosec -fmt sarif -out gosec.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: golang/gosec.sarif

  cross-platform-test:
    name: Cross-platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ["1.21", "1.22", "1.23"]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ matrix.os }}-go-${{ matrix.go-version }}-${{ hashFiles('golang/**/go.sum') }}

      - name: Download dependencies
        working-directory: ./golang
        run: go mod download

      - name: Run tests
        working-directory: ./golang
        run: go test -v ./...

      - name: Build project
        working-directory: ./golang
        run: go build -v ./...

  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
        working-directory: ./golang
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -ldflags="-s -w" ./...
          echo "✅ Successfully built for ${{ matrix.goos }}/${{ matrix.goarch }}"

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        working-directory: ./golang
        run: go mod download

      - name: Run performance benchmarks
        working-directory: ./golang
        run: |
          echo "Running performance benchmarks..."
          go test -bench=. -benchmem -count=3 ./... > benchmark_results.txt 2>&1 || echo "No benchmarks found"
          if [ -s benchmark_results.txt ]; then
            echo "Benchmark results:"
            cat benchmark_results.txt
          else
            echo "No benchmark results to display"
          fi

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: go-benchmark-results
          path: golang/benchmark_results.txt
